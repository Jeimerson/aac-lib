#!/bin/bash
#
# Copyright (c) 2017-2018 AstroArch Consulting, Inc. All rights reserved
#
# Install PowerCLI (rebuild CURL as necessary)
#
# Target: CentOS/RHEL 6/7
#
# Version 1.6.2
#
###
function powercli_version() {
	echo "1.6.2"
}

function powercli() {
	INSTALL="powershell"
	DINSTALL="powershell"
	DEVEL=""
	installopts=""

	# Get Repo
	prod="repo"
	if [ Z"$theos" = Z"centos" ] || [ Z"$theos" = Z"redhat" ] || [ Z"$theos" = Z"fedora" ]
	then
		tgtdir="/etc/yum.repos.d"
		myos="rhel"
	elif [ Z"$theos" = Z"debian" ] || [ Z"$theos" = Z"ubuntu" ]
	then
		tgtdir="/etc/apt/sources.list.d"
		myos=$theos
		prod="list"
	fi
	if [ ! -e ${tgtdir}/microsoft.${prod} ]
	then
		wget -O microsoft.${prod} https://packages.microsoft.com/config/${myos}/${VERSION_ID}/prod.${prod}
		mv microsoft.${prod} ${tgtdir}

		if [ Z"$theos" = Z"centos" ] || [ Z"$theos" = Z"redhat" ] || [ Z"$theos" = Z"fedora" ]
		then
			# reset because this may not be there
			yum -q clean all >& /dev/null
			yum -q makecache >& /dev/null
		elif [ Z"$theos" = Z"debian" ] || [ Z"$theos" = Z"ubuntu" ]
		then
			checkdep apt-transport-https
			if [ $needdep != 0 ]
			then
				DINSTALL="apt-transport-https"
				installdep
			fi
			apt-get update
			DINSTALL="powershell libcurl3 liblttng-ust-ctl2 liblttng-ust0 libunwind8 liburcu4"
			wget -O microsoft.key https://packages.microsoft.com/keys/microsoft.asc
			# this may not 'verify'
			apt-key add microsoft.key
			installopts="--allow-unauthenticated"
		fi
	fi

	doupdate=1
	checkdep powershell
	if [ $needdep != 0 ]
	then
		installdep $installopts
		doupdate=1
	else
		# Do we have a new version of powershell?
		if [ Z"$theos" = Z"centos" ] || [ Z"$theos" = Z"redhat" ] || [ Z"$theos" = Z"fedora" ]
		then
			v=`yum list powershell  |awk '{print $2}' | tail -1`
			rpm -q powershell-${v} >& /dev/null
			if [ $? -ne 0 ]
			then
				#install or update
				yum -y $installopts update powershell
				doupdate=1
			fi
		fi
	fi

	if [ ! -e /etc/profile.d/powershell.sh ] || [ $doupdate -eq 1 ]
	then
		echo "Setting Profile for Powershell"
		v=`ls -1 /opt/microsoft/powershell | tail -1`
		echo "export PSModulePath=/opt/microsoft/powershell/${v}:/usr/local/share/powershell/Modules" > /etc/profile.d/powershell.sh
		echo "setenv PSModulePath /opt/microsoft/powershell/${v}:/usr/local/share/powershell/Modules" > /etc/profile.d/powershell.csh
		. /etc/profile.d/powershell.sh
	else
		. /etc/profile.d/powershell.sh
	fi
	if [ $doupdate -eq 1 ]
	then
		# get bits first
		if [ -e /usr/bin/pwsh ]
		then
			echo "Installing PowerCLI"
			pwsh << EOF
Install-Module -Name VMware.PowerCLI -Scope AllUsers
A
EOF
			pwsh << EOF
Install-Module -Name PowerNSX -Scope AllUsers
A
EOF
			clear
		fi
		cat << EOF > /usr/local/share/powershell/Start-PowerCLI.ps1
\$a = (Get-Host).PrivateData
\$b = get-psreadlineoption | select ErrorBackgroundColor
\$clear = \$b.ErrorBackgroundColor
\$black= 'black'

if (\$clear -eq 'black') { 
	\$black='white' 
	set-psreadlineoption -Colors @{ 
	"Command" =  [ConsoleColor]::white
	"Number" = [ConsoleColor]::white
	"String" = [ConsoleColor]::white
	"Operator" = [ConsoleColor]::white
	"Member" = [ConsoleColor]::white
	"Parameter" = [ConsoleColor]::white
	"Type" = [ConsoleColor]::white
	"Variable" = [ConsoleColor]::white
	"Keyword" = [ConsoleColor]::white
	}
} else {
	set-psreadlineoption -Colors @{ 
	"Command" =  [ConsoleColor]::black
	"Number" = [ConsoleColor]::black
	"String" = [ConsoleColor]::black
	"Operator" = [ConsoleColor]::black
	"Member" = [ConsoleColor]::black
	"Parameter" = [ConsoleColor]::black
	"Type" = [ConsoleColor]::black
	"Variable" = [ConsoleColor]::black
	"Keyword" = [ConsoleColor]::black
	}
}
\$a.WarningForegroundColor = \$black
Get-module -ListAvailable VMware* | ForEach-Object {try { Import-module \$_ } catch { }}

\$productName = "vSphere PowerCLI"
\$productShortName = "PowerCLI"
\$CustomInitScriptName = "Initialize-PowerCLIEnvironment_Custom.ps1"
\$currentDir = Split-Path \$MyInvocation.MyCommand.Path
\$CustomInitScript = Join-Path \$currentDir \$CustomInitScriptName

# Update PowerCLI version after snap-in load
\$version = (Get-Module -Name 'VMware.VimAutomation.Cis.Core').Version
\$windowTitle = "VMware \$productName {0}.{1}.{2} Build {3} " -f \$version.Major, \$version.Minor, \$version.Build, \$version.Revision
\$host.ui.RawUI.WindowTitle = "\$windowTitle"
# Launch text
write-host "          Welcome to VMware \$productName!"
write-host ""
write-host "Log in to a vCenter Server or ESX host:              " -NoNewLine
write-host "Connect-VIServer" -foregroundcolor \$black
write-host "To find out what commands are available, type:       " -NoNewLine
write-host "Get-VICommand" -foregroundcolor \$black
write-host "Once you've connected, display all virtual machines: " -NoNewLine
write-host "Get-VM" -foregroundcolor \$black
write-host ""
write-host "       Copyright (C) VMware, Inc. All rights reserved."
write-host ""
write-host ""
EOF
		cat << EOF > /usr/local/bin/powercli
#!/bin/sh
/usr/bin/pwsh -NoExit -Command /usr/local/share/powershell/Start-PowerCLI.ps1
EOF
		chmod 755 /usr/local/bin/powercli
		#rm /tmp/Start-PowerCLI.ps1
	fi
}

